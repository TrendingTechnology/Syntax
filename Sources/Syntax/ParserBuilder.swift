import Foundation

@_functionBuilder
public struct ParserBuilder {

    public static func buildBlock() -> AnyParser<Void> {
        return EmptyParser().ignoreOutput()
    }

    public static func buildBlock<C0 : Parser>(_ c0: C0) -> AnyParser<C0.Output> {
        return AnyParser(c0)
    }

    public static func buildBlock<Output, C0 : Parser>(_ c0: C0) -> [AnyParser<Output>] where C0.Output == Output {
        return [c0.eraseToAnyParser()]
    }

    public static func buildIf<C0 : Parser>(_ c0: C0?) -> AnyParser<C0.Output?> {
        return c0.eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser>(_ c0: C0, _ c1: C1) -> AnyParser<(C0.Output, C1.Output)> {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser>(_ c0: C0, _ c1: C1) -> AnyParser<(C0.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser>(_ c0: C0, _ c1: C1) -> AnyParser<(C1.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser>(_ c0: C0, _ c1: C1) -> AnyParser<()> where C0.Output == Void, C1.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser>(_ c0: C0, _ c1: C1) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser()]
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> AnyParser<(C0.Output, C1.Output, C2.Output)> {
        return TupleParser<(C0.Output, C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> AnyParser<(C0.Output, C1.Output)> where C2.Output == Void {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> AnyParser<(C0.Output, C2.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser()], outputTypes: [C0.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> AnyParser<(C0.Output)> where C1.Output == Void, C2.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> AnyParser<(C1.Output, C2.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser()], outputTypes: [C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> AnyParser<(C1.Output)> where C0.Output == Void, C2.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> AnyParser<(C2.Output)> where C0.Output == Void, C1.Output == Void {
        return TupleParser<(C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser()], outputTypes: [C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> AnyParser<()> where C0.Output == Void, C1.Output == Void, C2.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser, C2: Parser>(_ c0: C0, _ c1: C1, _ c2: C2) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output, C2.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser(), c2.eraseToAnyParser()]
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output)> {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C0.Output, C1.Output, C2.Output)> where C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C0.Output, C1.Output, C3.Output)> where C2.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C0.Output, C1.Output)> where C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C0.Output, C2.Output, C3.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C0.Output, C2.Output)> where C1.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C0.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C0.Output, C3.Output)> where C1.Output == Void, C2.Output == Void {
        return TupleParser<(C0.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C0.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C0.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C1.Output, C2.Output, C3.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C1.Output, C2.Output)> where C0.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C1.Output, C3.Output)> where C0.Output == Void, C2.Output == Void {
        return TupleParser<(C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C1.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C2.Output, C3.Output)> where C0.Output == Void, C1.Output == Void {
        return TupleParser<(C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C2.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void {
        return TupleParser<(C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<(C3.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void {
        return TupleParser<(C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: [C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> AnyParser<()> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser, C2: Parser, C3: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output, C2.Output == Output, C3.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser(), c2.eraseToAnyParser(), c3.eraseToAnyParser()]
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)> {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output)> where C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output)> where C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C1.Output, C2.Output)> where C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output)> where C2.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C1.Output, C3.Output)> where C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C1.Output, C4.Output)> where C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C1.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C2.Output, C3.Output)> where C1.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C2.Output, C4.Output)> where C1.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C2.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C3.Output, C4.Output)> where C1.Output == Void, C2.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C3.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C0.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C1.Output, C2.Output, C3.Output)> where C0.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C1.Output, C2.Output, C4.Output)> where C0.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C1.Output, C2.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C1.Output, C3.Output, C4.Output)> where C0.Output == Void, C2.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C1.Output, C3.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C1.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C1.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C2.Output, C3.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C2.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void {
        return TupleParser<(C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C2.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void {
        return TupleParser<(C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C3.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<(C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: [C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> AnyParser<()> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output, C2.Output == Output, C3.Output == Output, C4.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser(), c2.eraseToAnyParser(), c3.eraseToAnyParser(), c4.eraseToAnyParser()]
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)> where C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)> where C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output)> where C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)> where C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output)> where C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output)> where C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C2.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)> where C2.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output)> where C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output)> where C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C3.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output)> where C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C4.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C1.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output)> where C1.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output)> where C1.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C2.Output, C3.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output)> where C1.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C2.Output, C4.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C2.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C2.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C3.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C3.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C3.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C0.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C2.Output, C3.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C2.Output, C4.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C2.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C2.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C3.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C3.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C3.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C1.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C2.Output, C3.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C2.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C2.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C2.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C3.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<(C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: [C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> AnyParser<()> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output, C2.Output == Output, C3.Output == Output, C4.Output == Output, C5.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser(), c2.eraseToAnyParser(), c3.eraseToAnyParser(), c4.eraseToAnyParser(), c5.eraseToAnyParser()]
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)> where C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)> where C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output)> where C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)> where C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output)> where C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output)> where C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C2.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C2.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)> where C2.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output)> where C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output)> where C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C3.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output)> where C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C4.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C1.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C1.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C1.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C3.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C4.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C2.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C3.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C3.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C3.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C3.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C4.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C0.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C3.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C4.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C2.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C3.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C3.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C3.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C3.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C4.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C1.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C3.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C3.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C2.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C3.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C3.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<(C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: [C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> AnyParser<()> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output, C2.Output == Output, C3.Output == Output, C4.Output == Output, C5.Output == Output, C6.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser(), c2.eraseToAnyParser(), c3.eraseToAnyParser(), c4.eraseToAnyParser(), c5.eraseToAnyParser(), c6.eraseToAnyParser()]
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)> where C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)> where C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output)> where C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)> where C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output)> where C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output)> where C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C2.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C2.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C2.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)> where C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output)> where C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output)> where C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C3.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C4.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C4.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C5.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C1.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C1.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C1.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C3.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C4.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C4.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C5.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C2.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C4.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C3.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C4.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C4.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C0.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C3.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C4.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C4.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C5.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C2.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C3.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C4.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C4.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C1.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C3.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C2.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C3.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<(C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: [C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> AnyParser<()> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output, C2.Output == Output, C3.Output == Output, C4.Output == Output, C5.Output == Output, C6.Output == Output, C7.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser(), c2.eraseToAnyParser(), c3.eraseToAnyParser(), c4.eraseToAnyParser(), c5.eraseToAnyParser(), c6.eraseToAnyParser(), c7.eraseToAnyParser()]
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C8.Output)> where C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)> where C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C8.Output)> where C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)> where C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C8.Output)> where C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output)> where C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output, C8.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C8.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C3.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C8.Output)> where C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)> where C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C8.Output)> where C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output)> where C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output, C8.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C8.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output)> where C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C7.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C2.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C2.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C2.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C2.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C2.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)> where C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C2.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output)> where C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C8.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output)> where C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C7.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C3.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C4.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C5.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C5.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C5.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C6.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C1.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C1.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C1.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C1.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C8.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C1.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C7.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C3.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C4.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C5.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C5.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C6.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C2.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C5.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C3.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C5.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C5.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C0.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C8.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C7.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C3.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C4.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C5.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C5.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C6.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C2.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C5.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C3.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C5.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C1.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C3.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C2.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C3.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<(C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: [C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> AnyParser<()> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output, C2.Output == Output, C3.Output == Output, C4.Output == Output, C5.Output == Output, C6.Output == Output, C7.Output == Output, C8.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser(), c2.eraseToAnyParser(), c3.eraseToAnyParser(), c4.eraseToAnyParser(), c5.eraseToAnyParser(), c6.eraseToAnyParser(), c7.eraseToAnyParser(), c8.eraseToAnyParser()]
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C9.Output)> where C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C9.Output)> where C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C9.Output)> where C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C8.Output, C9.Output)> where C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C8.Output)> where C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C9.Output)> where C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)> where C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C4.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C9.Output)> where C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C9.Output)> where C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C8.Output, C9.Output)> where C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C8.Output)> where C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C9.Output)> where C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)> where C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C9.Output)> where C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C8.Output, C9.Output)> where C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C8.Output)> where C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C9.Output)> where C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output)> where C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output, C8.Output, C9.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output, C8.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output, C9.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C8.Output, C9.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C8.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output, C9.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C3.Output)> where C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C3.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C3.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C3.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C3.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C3.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C3.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C3.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C8.Output)> where C3.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C9.Output)> where C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)> where C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C3.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C3.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C8.Output)> where C3.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C9.Output)> where C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output)> where C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output, C8.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output, C9.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C8.Output, C9.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C8.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output, C9.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C4.Output)> where C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output)> where C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C8.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C5.Output)> where C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C8.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C6.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C7.Output, C8.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C7.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C7.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C7.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C8.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C8.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output, C9.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C2.Output)> where C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C2.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C2.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C2.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C2.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C2.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C2.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C2.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C2.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C2.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C9.Output)> where C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)> where C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C2.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C2.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C2.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C9.Output)> where C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output)> where C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output, C9.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C8.Output, C9.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C8.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output, C9.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C4.Output)> where C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output)> where C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C8.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C5.Output)> where C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C8.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C6.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C7.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C7.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C7.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C8.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C8.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output, C9.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C3.Output)> where C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C7.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C4.Output)> where C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C7.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C5.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C6.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C6.Output, C7.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C6.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C6.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C6.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C6.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C6.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C7.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C7.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C7.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C7.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C8.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C8.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output, C9.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C1.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C1.Output)> where C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C1.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C1.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C1.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C1.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C9.Output)> where C1.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C1.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C9.Output)> where C1.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C1.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output, C9.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C8.Output, C9.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C8.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output, C9.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C4.Output)> where C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C1.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C8.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C5.Output)> where C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C6.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C7.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C7.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C7.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C8.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C8.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output, C9.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C3.Output)> where C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C7.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C4.Output)> where C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C7.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C5.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C6.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C6.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C6.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C6.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C7.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C7.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C7.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C8.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C8.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output, C9.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C2.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C2.Output)> where C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C6.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C3.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C3.Output)> where C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C6.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C4.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C6.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C5.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C6.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C6.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C6.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C6.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C6.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C6.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C6.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C7.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C0.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C7.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C7.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C7.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C8.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C0.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C8.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output, C9.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C0.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C0.Output)> where C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C0.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C0.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C9.Output)> where C0.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C9.Output)> where C0.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C9.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C8.Output, C9.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C8.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output, C9.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C6.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C7.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C7.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C7.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C8.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C8.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output, C9.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C3.Output)> where C0.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C7.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C4.Output)> where C0.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C5.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C6.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C6.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C6.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C6.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C7.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C7.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C7.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C8.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C8.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output, C9.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C2.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C2.Output)> where C0.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C6.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C3.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C3.Output)> where C0.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C6.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C4.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C5.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C6.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C6.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C6.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C6.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C1.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C7.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C7.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C7.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C8.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C1.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C8.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output, C9.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C1.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C1.Output)> where C0.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C1.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C1.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C3.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C3.Output)> where C0.Output == Void, C1.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C2.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C2.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C2.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C2.Output)> where C0.Output == Void, C1.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C2.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C2.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C3.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C3.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C3.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C3.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C3.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C3.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C4.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C4.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C4.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C4.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C4.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C4.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C9.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C5.Output, C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C5.Output, C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void {
        return TupleParser<(C5.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C5.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C5.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C5.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C5.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C5.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C5.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C5.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C5.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C5.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C6.Output, C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void {
        return TupleParser<(C6.Output, C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C6.Output.self, C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C6.Output, C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C9.Output == Void {
        return TupleParser<(C6.Output, C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C6.Output.self, C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C6.Output, C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void {
        return TupleParser<(C6.Output, C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C6.Output.self, C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C6.Output, C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C6.Output, C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C6.Output.self, C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C6.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void {
        return TupleParser<(C6.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C6.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C6.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C6.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C6.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C6.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C6.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C6.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C6.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C6.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C6.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C7.Output, C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void {
        return TupleParser<(C7.Output, C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C7.Output.self, C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C7.Output, C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C9.Output == Void {
        return TupleParser<(C7.Output, C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C7.Output.self, C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C7.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void {
        return TupleParser<(C7.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C7.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C7.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<(C7.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C7.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C8.Output, C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void {
        return TupleParser<(C8.Output, C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C8.Output.self, C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C8.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C9.Output == Void {
        return TupleParser<(C8.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C8.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<(C9.Output)> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void {
        return TupleParser<(C9.Output)>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: [C9.Output.self]).eraseToAnyParser()
    }

    public static func buildBlock<C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> AnyParser<()> where C0.Output == Void, C1.Output == Void, C2.Output == Void, C3.Output == Void, C4.Output == Void, C5.Output == Void, C6.Output == Void, C7.Output == Void, C8.Output == Void, C9.Output == Void {
        return TupleParser<()>(parsers: [c0.internalParser(), c1.internalParser(), c2.internalParser(), c3.internalParser(), c4.internalParser(), c5.internalParser(), c6.internalParser(), c7.internalParser(), c8.internalParser(), c9.internalParser()], outputTypes: []).eraseToAnyParser()
    }


    public static func buildBlock<Output, C0: Parser, C1: Parser, C2: Parser, C3: Parser, C4: Parser, C5: Parser, C6: Parser, C7: Parser, C8: Parser, C9: Parser>(_ c0: C0, _ c1: C1, _ c2: C2, _ c3: C3, _ c4: C4, _ c5: C5, _ c6: C6, _ c7: C7, _ c8: C8, _ c9: C9) -> [AnyParser<Output>] where C0.Output == Output, C1.Output == Output, C2.Output == Output, C3.Output == Output, C4.Output == Output, C5.Output == Output, C6.Output == Output, C7.Output == Output, C8.Output == Output, C9.Output == Output {
        return [c0.eraseToAnyParser(), c1.eraseToAnyParser(), c2.eraseToAnyParser(), c3.eraseToAnyParser(), c4.eraseToAnyParser(), c5.eraseToAnyParser(), c6.eraseToAnyParser(), c7.eraseToAnyParser(), c8.eraseToAnyParser(), c9.eraseToAnyParser()]
    }

}
